// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb

@SerialVersionUID(0L)
final case class Range(
    startLine: _root_.scala.Int = 0,
    startCharacter: _root_.scala.Int = 0,
    endLine: _root_.scala.Int = 0,
    endCharacter: _root_.scala.Int = 0
    ) extends scalapb.GeneratedMessage with scalapb.Message[Range] with scalapb.lenses.Updatable[Range] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = startLine
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      
      {
        val __value = startCharacter
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        }
      };
      
      {
        val __value = endLine
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        }
      };
      
      {
        val __value = endCharacter
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = startLine
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = startCharacter
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      {
        val __v = endLine
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
      {
        val __v = endCharacter
        if (__v != 0) {
          _output__.writeInt32(4, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.Range = {
      var __startLine = this.startLine
      var __startCharacter = this.startCharacter
      var __endLine = this.endLine
      var __endCharacter = this.endCharacter
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __startLine = _input__.readInt32()
          case 16 =>
            __startCharacter = _input__.readInt32()
          case 24 =>
            __endLine = _input__.readInt32()
          case 32 =>
            __endCharacter = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.Range(
          startLine = __startLine,
          startCharacter = __startCharacter,
          endLine = __endLine,
          endCharacter = __endCharacter
      )
    }
    def withStartLine(__v: _root_.scala.Int): Range = copy(startLine = __v)
    def withStartCharacter(__v: _root_.scala.Int): Range = copy(startCharacter = __v)
    def withEndLine(__v: _root_.scala.Int): Range = copy(endLine = __v)
    def withEndCharacter(__v: _root_.scala.Int): Range = copy(endCharacter = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = startLine
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = startCharacter
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = endLine
          if (__t != 0) __t else null
        }
        case 4 => {
          val __t = endCharacter
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(startLine)
        case 2 => _root_.scalapb.descriptors.PInt(startCharacter)
        case 3 => _root_.scalapb.descriptors.PInt(endLine)
        case 4 => _root_.scalapb.descriptors.PInt(endCharacter)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.Range
}

object Range extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Range] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Range] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.Range = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.Range(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(3), 0).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.Range] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.Range(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.Range(
  )
  implicit class RangeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Range]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.Range](_l) {
    def startLine: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.startLine)((c_, f_) => c_.copy(startLine = f_))
    def startCharacter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.startCharacter)((c_, f_) => c_.copy(startCharacter = f_))
    def endLine: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.endLine)((c_, f_) => c_.copy(endLine = f_))
    def endCharacter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.endCharacter)((c_, f_) => c_.copy(endCharacter = f_))
  }
  final val START_LINE_FIELD_NUMBER = 1
  final val START_CHARACTER_FIELD_NUMBER = 2
  final val END_LINE_FIELD_NUMBER = 3
  final val END_CHARACTER_FIELD_NUMBER = 4
}
