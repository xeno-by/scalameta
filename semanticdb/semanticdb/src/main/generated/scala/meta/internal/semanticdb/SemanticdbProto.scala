// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb

object SemanticdbProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    scala.meta.internal.semanticdb.TextDocuments,
    scala.meta.internal.semanticdb.TextDocument,
    scala.meta.internal.semanticdb.Range,
    scala.meta.internal.semanticdb.Location,
    scala.meta.internal.semanticdb.Scope,
    scala.meta.internal.semanticdb.TypeMessage,
    scala.meta.internal.semanticdb.TypeRef,
    scala.meta.internal.semanticdb.SingletonType,
    scala.meta.internal.semanticdb.IntersectionType,
    scala.meta.internal.semanticdb.UnionType,
    scala.meta.internal.semanticdb.WithType,
    scala.meta.internal.semanticdb.StructuralType,
    scala.meta.internal.semanticdb.AnnotatedType,
    scala.meta.internal.semanticdb.ExistentialType,
    scala.meta.internal.semanticdb.UniversalType,
    scala.meta.internal.semanticdb.ClassInfoType,
    scala.meta.internal.semanticdb.MethodType,
    scala.meta.internal.semanticdb.ByNameType,
    scala.meta.internal.semanticdb.RepeatedType,
    scala.meta.internal.semanticdb.TypeType,
    scala.meta.internal.semanticdb.SymbolInformation,
    scala.meta.internal.semanticdb.Annotation,
    scala.meta.internal.semanticdb.Accessibility,
    scala.meta.internal.semanticdb.SymbolOccurrence,
    scala.meta.internal.semanticdb.Diagnostic,
    scala.meta.internal.semanticdb.Synthetic
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """CiZzZW1hbnRpY2RiL3NlbWFudGljZGIvc2VtYW50aWNkYi5wcm90bxIec2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiI
  lsKDVRleHREb2N1bWVudHMSSgoJZG9jdW1lbnRzGAEgAygLMiwuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlRleHREb
  2N1bWVudFIJZG9jdW1lbnRzIpIECgxUZXh0RG9jdW1lbnQSPgoGc2NoZW1hGAEgASgOMiYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZ
  W1hbnRpY2RiLlNjaGVtYVIGc2NoZW1hEhAKA3VyaRgCIAEoCVIDdXJpEhIKBHRleHQYAyABKAlSBHRleHQSEAoDbWQ1GAsgASgJU
  gNtZDUSRAoIbGFuZ3VhZ2UYCiABKA4yKC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuTGFuZ3VhZ2VSCGxhbmd1YWdlE
  ksKB3N5bWJvbHMYBSADKAsyMS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU3ltYm9sSW5mb3JtYXRpb25SB3N5bWJvb
  HMSUgoLb2NjdXJyZW5jZXMYBiADKAsyMC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU3ltYm9sT2NjdXJyZW5jZVILb
  2NjdXJyZW5jZXMSTAoLZGlhZ25vc3RpY3MYByADKAsyKi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuRGlhZ25vc3RpY
  1ILZGlhZ25vc3RpY3MSSQoKc3ludGhldGljcxgIIAMoCzIpLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TeW50aGV0a
  WNSCnN5bnRoZXRpY3NKBAgEEAVKBAgJEAoijwEKBVJhbmdlEh0KCnN0YXJ0X2xpbmUYASABKAVSCXN0YXJ0TGluZRInCg9zdGFyd
  F9jaGFyYWN0ZXIYAiABKAVSDnN0YXJ0Q2hhcmFjdGVyEhkKCGVuZF9saW5lGAMgASgFUgdlbmRMaW5lEiMKDWVuZF9jaGFyYWN0Z
  XIYBCABKAVSDGVuZENoYXJhY3RlciJZCghMb2NhdGlvbhIQCgN1cmkYASABKAlSA3VyaRI7CgVyYW5nZRgCIAEoCzIlLnNjYWxhL
  m1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5SYW5nZVIFcmFuZ2UidAoFU2NvcGUSGgoIc3ltbGlua3MYASADKAlSCHN5bWxpbmtzE
  k8KCWhhcmRsaW5rcxgCIAMoCzIxLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TeW1ib2xJbmZvcm1hdGlvblIJaGFyZ
  GxpbmtzIpkJCgRUeXBlEkMKB3R5cGVSZWYYAiABKAsyJy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVJlZkgAU
  gd0eXBlUmVmElUKDXNpbmdsZXRvblR5cGUYECABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2luZ2xldG9uV
  HlwZUgAUg1zaW5nbGV0b25UeXBlEl4KEGludGVyc2VjdGlvblR5cGUYESABKAsyMC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFud
  GljZGIuSW50ZXJzZWN0aW9uVHlwZUgAUhBpbnRlcnNlY3Rpb25UeXBlEkkKCXVuaW9uVHlwZRgSIAEoCzIpLnNjYWxhLm1ldGEua
  W50ZXJuYWwuc2VtYW50aWNkYi5VbmlvblR5cGVIAFIJdW5pb25UeXBlEkYKCHdpdGhUeXBlGBMgASgLMiguc2NhbGEubWV0YS5pb
  nRlcm5hbC5zZW1hbnRpY2RiLldpdGhUeXBlSABSCHdpdGhUeXBlElgKDnN0cnVjdHVyYWxUeXBlGAcgASgLMi4uc2NhbGEubWV0Y
  S5pbnRlcm5hbC5zZW1hbnRpY2RiLlN0cnVjdHVyYWxUeXBlSABSDnN0cnVjdHVyYWxUeXBlElUKDWFubm90YXRlZFR5cGUYCCABK
  AsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQW5ub3RhdGVkVHlwZUgAUg1hbm5vdGF0ZWRUeXBlElsKD2V4aXN0Z
  W50aWFsVHlwZRgJIAEoCzIvLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5FeGlzdGVudGlhbFR5cGVIAFIPZXhpc3Rlb
  nRpYWxUeXBlElUKDXVuaXZlcnNhbFR5cGUYCiABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVW5pdmVyc2FsV
  HlwZUgAUg11bml2ZXJzYWxUeXBlElUKDWNsYXNzSW5mb1R5cGUYCyABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZ
  GIuQ2xhc3NJbmZvVHlwZUgAUg1jbGFzc0luZm9UeXBlEkwKCm1ldGhvZFR5cGUYDCABKAsyKi5zY2FsYS5tZXRhLmludGVybmFsL
  nNlbWFudGljZGIuTWV0aG9kVHlwZUgAUgptZXRob2RUeXBlEkwKCmJ5TmFtZVR5cGUYDSABKAsyKi5zY2FsYS5tZXRhLmludGVyb
  mFsLnNlbWFudGljZGIuQnlOYW1lVHlwZUgAUgpieU5hbWVUeXBlElIKDHJlcGVhdGVkVHlwZRgOIAEoCzIsLnNjYWxhLm1ldGEua
  W50ZXJuYWwuc2VtYW50aWNkYi5SZXBlYXRlZFR5cGVIAFIMcmVwZWF0ZWRUeXBlEkYKCHR5cGVUeXBlGA8gASgLMiguc2NhbGEub
  WV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVUeXBlSABSCHR5cGVUeXBlQg4KDHNlYWxlZF92YWx1ZSKsAQoHVHlwZVJlZhI8C
  gZwcmVmaXgYASABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIGcHJlZml4EhYKBnN5bWJvbBgCIAEoC
  VIGc3ltYm9sEksKDnR5cGVfYXJndW1lbnRzGAMgAygLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSDXR5c
  GVBcmd1bWVudHMilgMKDVNpbmdsZXRvblR5cGUSQwoDdGFnGAEgASgOMjEuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiL
  lNpbmdsZXRvblR5cGUuVGFnUgN0YWcSPAoGcHJlZml4GAIgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5c
  GVSBnByZWZpeBIWCgZzeW1ib2wYAyABKAlSBnN5bWJvbBIcCglwcmltaXRpdmUYBCABKANSCXByaW1pdGl2ZRIWCgZzdHJpbmcYB
  SABKAlSBnN0cmluZyKzAQoDVGFnEhUKEVVOS05PV05fU0lOR0xFVE9OEAASCgoGU1lNQk9MEAESCAoEVEhJUxACEgkKBVNVUEVSE
  AMSCAoEVU5JVBAEEgsKB0JPT0xFQU4QBRIICgRCWVRFEAYSCQoFU0hPUlQQBxIICgRDSEFSEAgSBwoDSU5UEAkSCAoETE9ORxAKE
  gkKBUZMT0FUEAsSCgoGRE9VQkxFEAwSCgoGU1RSSU5HEA0SCAoETlVMTBAOIk4KEEludGVyc2VjdGlvblR5cGUSOgoFdHlwZXMYA
  SADKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIFdHlwZXMiRwoJVW5pb25UeXBlEjoKBXR5cGVzGAEgA
  ygLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSBXR5cGVzIkYKCFdpdGhUeXBlEjoKBXR5cGVzGAEgAygLM
  iQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSBXR5cGVzIqUBCg5TdHJ1Y3R1cmFsVHlwZRI2CgN0cGUYBCABK
  AsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIDdHBlEkkKDGRlY2xhcmF0aW9ucxgFIAEoCzIlLnNjYWxhL
  m1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TY29wZVIMZGVjbGFyYXRpb25zSgQIARACSgQIAhADSgQIAxAEIpsBCg1Bbm5vdGF0Z
  WRUeXBlEkwKC2Fubm90YXRpb25zGAMgAygLMiouc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkFubm90YXRpb25SC2Fub
  m90YXRpb25zEjYKA3RwZRgBIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlUgN0cGVKBAgCEAMimgEKD
  0V4aXN0ZW50aWFsVHlwZRI2CgN0cGUYASABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIDdHBlEkkKD
  GRlY2xhcmF0aW9ucxgDIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TY29wZVIMZGVjbGFyYXRpb25zSgQIA
  hADIp0BCg1Vbml2ZXJzYWxUeXBlEk4KD3R5cGVfcGFyYW1ldGVycxgDIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50a
  WNkYi5TY29wZVIOdHlwZVBhcmFtZXRlcnMSNgoDdHBlGAIgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5c
  GVSA3RwZUoECAEQAiL2AQoNQ2xhc3NJbmZvVHlwZRJOCg90eXBlX3BhcmFtZXRlcnMYBCABKAsyJS5zY2FsYS5tZXRhLmludGVyb
  mFsLnNlbWFudGljZGIuU2NvcGVSDnR5cGVQYXJhbWV0ZXJzEj4KB3BhcmVudHMYAiADKAsyJC5zY2FsYS5tZXRhLmludGVybmFsL
  nNlbWFudGljZGIuVHlwZVIHcGFyZW50cxJJCgxkZWNsYXJhdGlvbnMYBSABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFud
  GljZGIuU2NvcGVSDGRlY2xhcmF0aW9uc0oECAEQAkoECAMQBCL+AQoKTWV0aG9kVHlwZRJOCg90eXBlX3BhcmFtZXRlcnMYBCABK
  AsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2NvcGVSDnR5cGVQYXJhbWV0ZXJzEk0KDnBhcmFtZXRlckxpc3RzG
  AUgAygLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlNjb3BlUg5wYXJhbWV0ZXJMaXN0cxJFCgtyZXR1cm5fdHlwZ
  RgDIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlUgpyZXR1cm5UeXBlSgQIARACSgQIAhADIkQKCkJ5T
  mFtZVR5cGUSNgoDdHBlGAEgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSA3RwZSJGCgxSZXBlYXRlZ
  FR5cGUSNgoDdHBlGAEgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSA3RwZSLuAQoIVHlwZVR5cGUST
  goPdHlwZV9wYXJhbWV0ZXJzGAQgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlNjb3BlUg50eXBlUGFyYW1ld
  GVycxJFCgtsb3dlcl9ib3VuZBgCIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlUgpsb3dlckJvdW5kE
  kUKC3VwcGVyX2JvdW5kGAMgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSCnVwcGVyQm91bmRKBAgBE
  AIiwgcKEVN5bWJvbEluZm9ybWF0aW9uEhYKBnN5bWJvbBgBIAEoCVIGc3ltYm9sEkQKCGxhbmd1YWdlGBAgASgOMiguc2NhbGEub
  WV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkxhbmd1YWdlUghsYW5ndWFnZRJKCgRraW5kGAMgASgOMjYuc2NhbGEubWV0YS5pbnRlc
  m5hbC5zZW1hbnRpY2RiLlN5bWJvbEluZm9ybWF0aW9uLktpbmRSBGtpbmQSHgoKcHJvcGVydGllcxgEIAEoBVIKcHJvcGVydGllc
  xISCgRuYW1lGAUgASgJUgRuYW1lEjYKA3RwZRgLIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlUgN0c
  GUSTAoLYW5ub3RhdGlvbnMYDSADKAsyKi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQW5ub3RhdGlvblILYW5ub3Rhd
  GlvbnMSUwoNYWNjZXNzaWJpbGl0eRgOIAEoCzItLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5BY2Nlc3NpYmlsaXR5U
  g1hY2Nlc3NpYmlsaXR5EhQKBW93bmVyGA8gASgJUgVvd25lciLpAQoES2luZBIQCgxVTktOT1dOX0tJTkQQABIJCgVMT0NBTBATE
  gkKBUZJRUxEEBQSCgoGTUVUSE9EEAMSDwoLQ09OU1RSVUNUT1IQFRIJCgVNQUNSTxAGEggKBFRZUEUQBxINCglQQVJBTUVURVIQC
  BISCg5TRUxGX1BBUkFNRVRFUhAREhIKDlRZUEVfUEFSQU1FVEVSEAkSCgoGT0JKRUNUEAoSCwoHUEFDS0FHRRALEhIKDlBBQ0tBR
  0VfT0JKRUNUEAwSCQoFQ0xBU1MQDRIJCgVUUkFJVBAOEg0KCUlOVEVSRkFDRRASIscBCghQcm9wZXJ0eRIUChBVTktOT1dOX1BST
  1BFUlRZEAASDAoIQUJTVFJBQ1QQBBIJCgVGSU5BTBAIEgoKBlNFQUxFRBAQEgwKCElNUExJQ0lUECASCAoETEFaWRBAEgkKBENBU
  0UQgAESDgoJQ09WQVJJQU5UEIACEhIKDUNPTlRSQVZBUklBTlQQgAQSCAoDVkFMEIAIEggKA1ZBUhCAEBILCgZTVEFUSUMQgCASD
  AoHUFJJTUFSWRCAQBIKCgRFTlVNEICAAUoECAIQA0oECAYQB0oECAcQCEoECAgQCUoECAkQCkoECAoQC0oECAwQDSJECgpBbm5vd
  GF0aW9uEjYKA3RwZRgBIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlUgN0cGUihwIKDUFjY2Vzc2lia
  WxpdHkSQwoDdGFnGAEgASgOMjEuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkFjY2Vzc2liaWxpdHkuVGFnUgN0YWcSF
  goGc3ltYm9sGAIgASgJUgZzeW1ib2wimAEKA1RhZxIZChVVTktOT1dOX0FDQ0VTU0lCSUxJVFkQABILCgdQUklWQVRFEAESEAoMU
  FJJVkFURV9USElTEAISEgoOUFJJVkFURV9XSVRISU4QAxINCglQUk9URUNURUQQBBISCg5QUk9URUNURURfVEhJUxAFEhQKEFBST
  1RFQ1RFRF9XSVRISU4QBhIKCgZQVUJMSUMQByLrAQoQU3ltYm9sT2NjdXJyZW5jZRI7CgVyYW5nZRgBIAEoCzIlLnNjYWxhLm1ld
  GEuaW50ZXJuYWwuc2VtYW50aWNkYi5SYW5nZVIFcmFuZ2USFgoGc3ltYm9sGAIgASgJUgZzeW1ib2wSSQoEcm9sZRgDIAEoDjI1L
  nNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TeW1ib2xPY2N1cnJlbmNlLlJvbGVSBHJvbGUiNwoEUm9sZRIQCgxVTktOT
  1dOX1JPTEUQABINCglSRUZFUkVOQ0UQARIOCgpERUZJTklUSU9OEAIiiQIKCkRpYWdub3N0aWMSOwoFcmFuZ2UYASABKAsyJS5zY
  2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuUmFuZ2VSBXJhbmdlEk8KCHNldmVyaXR5GAIgASgOMjMuc2NhbGEubWV0YS5pb
  nRlcm5hbC5zZW1hbnRpY2RiLkRpYWdub3N0aWMuU2V2ZXJpdHlSCHNldmVyaXR5EhgKB21lc3NhZ2UYAyABKAlSB21lc3NhZ2UiU
  woIU2V2ZXJpdHkSFAoQVU5LTk9XTl9TRVZFUklUWRAAEgkKBUVSUk9SEAESCwoHV0FSTklORxACEg8KC0lORk9STUFUSU9OEAMSC
  AoESElOVBAEIooBCglTeW50aGV0aWMSOwoFcmFuZ2UYASABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuUmFuZ
  2VSBXJhbmdlEkAKBHRleHQYAiABKAsyLC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVGV4dERvY3VtZW50UgR0ZXh0K
  jYKBlNjaGVtYRIKCgZMRUdBQ1kQABIPCgtTRU1BTlRJQ0RCMxADEg8KC1NFTUFOVElDREI0EAQqNQoITGFuZ3VhZ2USFAoQVU5LT
  k9XTl9MQU5HVUFHRRAAEgkKBVNDQUxBEAESCAoESkFWQRACYgZwcm90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}