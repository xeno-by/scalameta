// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb

@SerialVersionUID(0L)
final case class Accessibility(
    tag: scala.meta.internal.semanticdb.Accessibility.Tag = scala.meta.internal.semanticdb.Accessibility.Tag.UNKNOWN_ACCESSIBILITY,
    symbol: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[Accessibility] with scalapb.lenses.Updatable[Accessibility] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = tag
        if (__value != scala.meta.internal.semanticdb.Accessibility.Tag.UNKNOWN_ACCESSIBILITY) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value.value)
        }
      };
      
      {
        val __value = symbol
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = tag
        if (__v != scala.meta.internal.semanticdb.Accessibility.Tag.UNKNOWN_ACCESSIBILITY) {
          _output__.writeEnum(1, __v.value)
        }
      };
      {
        val __v = symbol
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.Accessibility = {
      var __tag = this.tag
      var __symbol = this.symbol
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __tag = scala.meta.internal.semanticdb.Accessibility.Tag.fromValue(_input__.readEnum())
          case 18 =>
            __symbol = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.Accessibility(
          tag = __tag,
          symbol = __symbol
      )
    }
    def withTag(__v: scala.meta.internal.semanticdb.Accessibility.Tag): Accessibility = copy(tag = __v)
    def withSymbol(__v: _root_.scala.Predef.String): Accessibility = copy(symbol = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = tag.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => {
          val __t = symbol
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(tag.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PString(symbol)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.Accessibility
}

object Accessibility extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Accessibility] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Accessibility] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.Accessibility = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.Accessibility(
      scala.meta.internal.semanticdb.Accessibility.Tag.fromValue(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.Accessibility.Tag.UNKNOWN_ACCESSIBILITY.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.Accessibility] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.Accessibility(
        scala.meta.internal.semanticdb.Accessibility.Tag.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scala.meta.internal.semanticdb.Accessibility.Tag.UNKNOWN_ACCESSIBILITY.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(22)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(22)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => scala.meta.internal.semanticdb.Accessibility.Tag
    }
  }
  lazy val defaultInstance = scala.meta.internal.semanticdb.Accessibility(
  )
  sealed trait Tag extends _root_.scalapb.GeneratedEnum {
    type EnumType = Tag
    def isUnknownAccessibility: _root_.scala.Boolean = false
    def isPrivate: _root_.scala.Boolean = false
    def isPrivateThis: _root_.scala.Boolean = false
    def isPrivateWithin: _root_.scala.Boolean = false
    def isProtected: _root_.scala.Boolean = false
    def isProtectedThis: _root_.scala.Boolean = false
    def isProtectedWithin: _root_.scala.Boolean = false
    def isPublic: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Tag] = scala.meta.internal.semanticdb.Accessibility.Tag
  }
  
  object Tag extends _root_.scalapb.GeneratedEnumCompanion[Tag] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Tag] = this
    @SerialVersionUID(0L)
    case object UNKNOWN_ACCESSIBILITY extends Tag {
      val value = 0
      val index = 0
      val name = "UNKNOWN_ACCESSIBILITY"
      override def isUnknownAccessibility: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object PRIVATE extends Tag {
      val value = 1
      val index = 1
      val name = "PRIVATE"
      override def isPrivate: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object PRIVATE_THIS extends Tag {
      val value = 2
      val index = 2
      val name = "PRIVATE_THIS"
      override def isPrivateThis: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object PRIVATE_WITHIN extends Tag {
      val value = 3
      val index = 3
      val name = "PRIVATE_WITHIN"
      override def isPrivateWithin: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object PROTECTED extends Tag {
      val value = 4
      val index = 4
      val name = "PROTECTED"
      override def isProtected: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object PROTECTED_THIS extends Tag {
      val value = 5
      val index = 5
      val name = "PROTECTED_THIS"
      override def isProtectedThis: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object PROTECTED_WITHIN extends Tag {
      val value = 6
      val index = 6
      val name = "PROTECTED_WITHIN"
      override def isProtectedWithin: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object PUBLIC extends Tag {
      val value = 7
      val index = 7
      val name = "PUBLIC"
      override def isPublic: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Tag with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(UNKNOWN_ACCESSIBILITY, PRIVATE, PRIVATE_THIS, PRIVATE_WITHIN, PROTECTED, PROTECTED_THIS, PROTECTED_WITHIN, PUBLIC)
    def fromValue(value: _root_.scala.Int): Tag = value match {
      case 0 => UNKNOWN_ACCESSIBILITY
      case 1 => PRIVATE
      case 2 => PRIVATE_THIS
      case 3 => PRIVATE_WITHIN
      case 4 => PROTECTED
      case 5 => PROTECTED_THIS
      case 6 => PROTECTED_WITHIN
      case 7 => PUBLIC
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = scala.meta.internal.semanticdb.Accessibility.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = scala.meta.internal.semanticdb.Accessibility.scalaDescriptor.enums(0)
  }
  implicit class AccessibilityLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Accessibility]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.Accessibility](_l) {
    def tag: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Accessibility.Tag] = field(_.tag)((c_, f_) => c_.copy(tag = f_))
    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
  }
  final val TAG_FIELD_NUMBER = 1
  final val SYMBOL_FIELD_NUMBER = 2
}
