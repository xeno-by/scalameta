// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb

@SerialVersionUID(0L)
final case class Diagnostic(
    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range] = None,
    severity: scala.meta.internal.semanticdb.Diagnostic.Severity = scala.meta.internal.semanticdb.Diagnostic.Severity.UNKNOWN_SEVERITY,
    message: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[Diagnostic] with scalapb.lenses.Updatable[Diagnostic] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (range.isDefined) {
        val __value = range.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = severity
        if (__value != scala.meta.internal.semanticdb.Diagnostic.Severity.UNKNOWN_SEVERITY) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value.value)
        }
      };
      
      {
        val __value = message
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      range.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = severity
        if (__v != scala.meta.internal.semanticdb.Diagnostic.Severity.UNKNOWN_SEVERITY) {
          _output__.writeEnum(2, __v.value)
        }
      };
      {
        val __v = message
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.Diagnostic = {
      var __range = this.range
      var __severity = this.severity
      var __message = this.message
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __range = Option(_root_.scalapb.LiteParser.readMessage(_input__, __range.getOrElse(scala.meta.internal.semanticdb.Range.defaultInstance)))
          case 16 =>
            __severity = scala.meta.internal.semanticdb.Diagnostic.Severity.fromValue(_input__.readEnum())
          case 26 =>
            __message = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.Diagnostic(
          range = __range,
          severity = __severity,
          message = __message
      )
    }
    def getRange: scala.meta.internal.semanticdb.Range = range.getOrElse(scala.meta.internal.semanticdb.Range.defaultInstance)
    def clearRange: Diagnostic = copy(range = None)
    def withRange(__v: scala.meta.internal.semanticdb.Range): Diagnostic = copy(range = Option(__v))
    def withSeverity(__v: scala.meta.internal.semanticdb.Diagnostic.Severity): Diagnostic = copy(severity = __v)
    def withMessage(__v: _root_.scala.Predef.String): Diagnostic = copy(message = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => range.orNull
        case 2 => {
          val __t = severity.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 3 => {
          val __t = message
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => range.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PEnum(severity.scalaValueDescriptor)
        case 3 => _root_.scalapb.descriptors.PString(message)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.Diagnostic
}

object Diagnostic extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Diagnostic] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Diagnostic] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.Diagnostic = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.Diagnostic(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Range]],
      scala.meta.internal.semanticdb.Diagnostic.Severity.fromValue(__fieldsMap.getOrElse(__fields.get(1), scala.meta.internal.semanticdb.Diagnostic.Severity.UNKNOWN_SEVERITY.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.Diagnostic] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.Diagnostic(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Range]]),
        scala.meta.internal.semanticdb.Diagnostic.Severity.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scala.meta.internal.semanticdb.Diagnostic.Severity.UNKNOWN_SEVERITY.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(24)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(24)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.Range
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => scala.meta.internal.semanticdb.Diagnostic.Severity
    }
  }
  lazy val defaultInstance = scala.meta.internal.semanticdb.Diagnostic(
  )
  sealed trait Severity extends _root_.scalapb.GeneratedEnum {
    type EnumType = Severity
    def isUnknownSeverity: _root_.scala.Boolean = false
    def isError: _root_.scala.Boolean = false
    def isWarning: _root_.scala.Boolean = false
    def isInformation: _root_.scala.Boolean = false
    def isHint: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Severity] = scala.meta.internal.semanticdb.Diagnostic.Severity
  }
  
  object Severity extends _root_.scalapb.GeneratedEnumCompanion[Severity] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Severity] = this
    @SerialVersionUID(0L)
    case object UNKNOWN_SEVERITY extends Severity {
      val value = 0
      val index = 0
      val name = "UNKNOWN_SEVERITY"
      override def isUnknownSeverity: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object ERROR extends Severity {
      val value = 1
      val index = 1
      val name = "ERROR"
      override def isError: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object WARNING extends Severity {
      val value = 2
      val index = 2
      val name = "WARNING"
      override def isWarning: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object INFORMATION extends Severity {
      val value = 3
      val index = 3
      val name = "INFORMATION"
      override def isInformation: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object HINT extends Severity {
      val value = 4
      val index = 4
      val name = "HINT"
      override def isHint: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Severity with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(UNKNOWN_SEVERITY, ERROR, WARNING, INFORMATION, HINT)
    def fromValue(value: _root_.scala.Int): Severity = value match {
      case 0 => UNKNOWN_SEVERITY
      case 1 => ERROR
      case 2 => WARNING
      case 3 => INFORMATION
      case 4 => HINT
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = scala.meta.internal.semanticdb.Diagnostic.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = scala.meta.internal.semanticdb.Diagnostic.scalaDescriptor.enums(0)
  }
  implicit class DiagnosticLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Diagnostic]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.Diagnostic](_l) {
    def range: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Range] = field(_.getRange)((c_, f_) => c_.copy(range = Option(f_)))
    def optionalRange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Range]] = field(_.range)((c_, f_) => c_.copy(range = f_))
    def severity: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Diagnostic.Severity] = field(_.severity)((c_, f_) => c_.copy(severity = f_))
    def message: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.message)((c_, f_) => c_.copy(message = f_))
  }
  final val RANGE_FIELD_NUMBER = 1
  final val SEVERITY_FIELD_NUMBER = 2
  final val MESSAGE_FIELD_NUMBER = 3
}
