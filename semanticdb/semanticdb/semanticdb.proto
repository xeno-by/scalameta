syntax = "proto3";

package scala.meta.internal.semanticdb;

enum Schema {
  LEGACY = 0;
  SEMANTICDB3 = 3;
  SEMANTICDB4 = 4;
}

message TextDocuments {
  repeated TextDocument documents = 1;
}

message TextDocument {
  reserved 4, 9;
  Schema schema = 1;
  string uri = 2;
  string text = 3;
  string md5 = 11;
  Language language = 10;
  repeated SymbolInformation symbols = 5;
  repeated SymbolOccurrence occurrences = 6;
  repeated Diagnostic diagnostics = 7;
  repeated Synthetic synthetics = 8;
}

enum Language {
  UNKNOWN_LANGUAGE = 0;
  SCALA = 1;
  JAVA = 2;
}

message Range {
  int32 start_line = 1;
  int32 start_character = 2;
  int32 end_line = 3;
  int32 end_character = 4;
}

message Location {
  string uri = 1;
  Range range = 2;
}

message Scope {
  repeated string symlinks = 1;
  repeated SymbolInformation hardlinks = 2;
}

message Type {
 //   reserved 1, 3, 4, 5, 6;
  oneof sealed_value {
    TypeRef typeRef = 2;
    SingletonType singletonType = 16;
    IntersectionType intersectionType = 17;
    UnionType unionType = 18;
    WithType withType = 19;
    StructuralType structuralType = 7;
    AnnotatedType annotatedType = 8;
    ExistentialType existentialType = 9;
    UniversalType universalType = 10;
    ClassInfoType classInfoType = 11;
    MethodType methodType = 12;
    ByNameType byNameType = 13;
    RepeatedType repeatedType = 14;
    TypeType typeType = 15;
  }
}

message TypeRef {
  Type prefix = 1;
  string symbol = 2;
  repeated Type type_arguments = 3;
}

message SingletonType {
  enum Tag {
    UNKNOWN_SINGLETON = 0;
    SYMBOL = 1;
    THIS = 2;
    SUPER = 3;
    UNIT = 4;
    BOOLEAN = 5;
    BYTE = 6;
    SHORT = 7;
    CHAR = 8;
    INT = 9;
    LONG = 10;
    FLOAT = 11;
    DOUBLE = 12;
    STRING = 13;
    NULL = 14;
  }
  Tag tag = 1;
  Type prefix = 2;
  string symbol = 3;
  int64 primitive = 4;
  string string = 5;
}

message IntersectionType {
  repeated Type types = 1;
}

message UnionType {
  repeated Type types = 1;
}

message WithType {
  repeated Type types = 1;
}

message StructuralType {
  reserved 1, 2, 3;
  Type tpe = 4;
  Scope declarations = 5;
}

message AnnotatedType {
  reserved 2;
  repeated Annotation annotations = 3;
  Type tpe = 1;
}

message ExistentialType {
  reserved 2;
  Type tpe = 1;
  Scope declarations = 3;
}

message UniversalType {
  reserved 1;
  Scope type_parameters = 3;
  Type tpe = 2;
}

message ClassInfoType {
  reserved 1, 3;
  Scope type_parameters = 4;
  repeated Type parents = 2;
  Scope declarations = 5;
}

message MethodType {
  reserved 1, 2;
  Scope type_parameters = 4;
  repeated Scope parameterLists = 5;
  Type return_type = 3;
}

message ByNameType {
  Type tpe = 1;
}

message RepeatedType {
  Type tpe = 1;
}

message TypeType {
  reserved 1;
  Scope type_parameters = 4;
  Type lower_bound = 2;
  Type upper_bound = 3;
}

message SymbolInformation {
  enum Kind {
    // reserved 1, 2, 4, 5, 15, 16;
    UNKNOWN_KIND = 0;
    LOCAL = 19;
    FIELD = 20;
    METHOD = 3;
    CONSTRUCTOR = 21;
    MACRO = 6;
    TYPE = 7;
    PARAMETER = 8;
    SELF_PARAMETER = 17;
    TYPE_PARAMETER = 9;
    OBJECT = 10;
    PACKAGE = 11;
    PACKAGE_OBJECT = 12;
    CLASS = 13;
    TRAIT = 14;
    INTERFACE = 18;
  }
  enum Property {
    UNKNOWN_PROPERTY = 0;
    // reserved 0x1;
    // reserved 0x2;
    ABSTRACT = 0x4;
    FINAL = 0x8;
    SEALED = 0x10;
    IMPLICIT = 0x20;
    LAZY = 0x40;
    CASE = 0x80;
    COVARIANT = 0x100;
    CONTRAVARIANT = 0x200;
    VAL = 0x400;
    VAR = 0x800;
    STATIC = 0x1000;
    PRIMARY = 0x2000;
    ENUM = 0x4000;
  }
  reserved 2, 6, 7, 8, 9, 10, 12;
  string symbol = 1;
  Language language = 16;
  Kind kind = 3;
  int32 properties = 4;
  string name = 5;
  Type tpe = 11;
  repeated Annotation annotations = 13;
  Accessibility accessibility = 14;
  string owner = 15;
}

message Annotation {
  Type tpe = 1;
}

message Accessibility {
  enum Tag {
    UNKNOWN_ACCESSIBILITY = 0;
    PRIVATE = 1;
    PRIVATE_THIS = 2;
    PRIVATE_WITHIN = 3;
    PROTECTED = 4;
    PROTECTED_THIS = 5;
    PROTECTED_WITHIN = 6;
    PUBLIC = 7;
  }
  Tag tag = 1;
  string symbol = 2;
}

message SymbolOccurrence {
  enum Role {
    UNKNOWN_ROLE = 0;
    REFERENCE = 1;
    DEFINITION = 2;
  }
  Range range = 1;
  string symbol = 2;
  Role role = 3;
}

message Diagnostic {
  enum Severity {
    UNKNOWN_SEVERITY = 0;
    ERROR = 1;
    WARNING = 2;
    INFORMATION = 3;
    HINT = 4;
  }
  Range range = 1;
  Severity severity = 2;
  string message = 3;
}

message Synthetic {
  Range range = 1;
  TextDocument text = 2;
}
